Wiggle sequence
//wiggle seq
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int n=nums.size();
        if(n<=1)return n;
        vector<int>local(n,0),global(n,0);
        int pos=nums[1]==nums[0]?-1:nums[1]>nums[0]?1:0; int l;
        if(pos==-1)l=1;
        else l=2;
        for(int i=2;i<n;i++){
            if(nums[i]-nums[i-1]==0)continue;
            if(nums[i]>nums[i-1] && (pos==0 || pos==-1)){
                l++;pos=1;
            }
            else if(nums[i]<nums[i-1] && (pos==1 || pos==-1)){
                l++;pos=0;
            }
        }
        return l;
    }
};
//Excel sheet
class Solution {
public:
    string convertToTitle(int n) {
        string res="";
        while(n>0){
            int r=n%26;
            if(!r){
                res='Z'+res;
                n=n/26-1;
            }
            else{
                res=char('A'+r-1)+res;
                n/=26;
            }
        }
        return res;
    }
};
//next Palindrome
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
void fun(vector<int>&a,int n){
    int i,j;
    if(n%2){
        i=n/2-1;
        j=n/2+1;
    }
    else{
        i=n/2-1;
        j=n/2;
    }
    //cout<<i<<" "<<j<<endl;
    //ignore part
    while(a[i]==a[j]){
        //cout<<i<<" "<<j<<" "<<a[i]<<" "<<a[j]<<endl;
        i--;
        j++;
    }
    int flag=0;
    //palindrome case
    //cout<<i<<" "<<j<<endl;
    if(i<0 && j>=n){
        flag=1;
    }
    else{
        if(a[i]<a[j])flag=1;
        while(i>=0 && j<n){
            a[j++]=a[i--];
        }
    }
    // cout<<"flag:"<<flag<<endl;
    if(flag){
        int carry=0;
        if(n%2){
            i=n/2-1;
            j=n/2+1;
            carry=(a[n/2]+1)/10;
            a[n/2]=(a[n/2]+1)%10;
        }
        else{
            i=n/2-1;
            carry=(a[i]+1)/10;
            a[i]=(a[i]+1)%10;
            j=n/2;
            a[j]=a[i];
        }
        while(carry && i>=0 && j<n){
            carry=(a[i]+1)/10;
            a[i]=(a[i]+1)%10;
            a[j]=a[i];
            i--;j++;
        }
        
        if(carry){
            vector<int>::iterator it=a.begin();
            a.insert(it,1);
            a.push_back(1);
        }
    }
    for(int i=0;i<a.size();i++){
        cout<<a[i]<<" ";
    }
    cout<<endl;
}
int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n;cin>>n;
	    vector<int>a(n);
	    for(int i=0;i<n;i++){
	        cin>>a[i];
	    }
	    fun(a,n);
	}
	return 0;
}
//count no of triangles
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int fun(vector<int>&a,int n){
    sort(a.begin(),a.end());
    int count=0;
    for(int i=0;i<n-2;i++){
        for(int j=i+1;j<n-1;j++){
            for(int k=n-1;k>j;k--){
                if(a[i]+a[j]>a[k]){
                    count+=k-j;
                    break;
                }
            }
        }
    }
    return count;
}
int main() {
	//code
	int t;cin>>t;
	while(t--){
	    int n;cin>>n;
	    vector<int>a(n);
	    for(int i=0;i<n;i++){
	        cin>>a[i];
	    }
	    cout<<fun(a,n)<<endl;
	}
	return 0;
}
//Matrix Rotation
#include<bits/stdc++.h>
#define ct(x) cout<<"debug"<<x<<endl
using namespace std;
void rotate(std::vector<int> &v,int k){
	int n=v.size();
	k=k%n;
	std::vector<int> temp(n);
	for (int i = 0; i < n; ++i)
	{
		cout<<v[i]<<" ";
	}cout<<endl;
	for (int i = 0; i < n; ++i)
	{
		if(i+k<n)
			temp[i+k]=v[i];
		else
			temp[(i+k)%n]=v[i];
	}
	for (int i = 0; i < n; ++i)
	{
		cout<<v[i]<<" ";
	}cout<<endl;
	v=temp;
}
void print(std::vector<std::vector<int> >&v){
	for (int i = 0; i < v.size(); ++i)
	{
		for (int j = 0; j < v[0].size();j++)
		{
			cout<<v[i][j]<<" ";
		}
		cout<<endl;
	}
}
void fun(std::vector<std::vector<int> >&v,int m,int n,int k){
	ct(1);
	int r=0,c=0,pr=0,pc=0,pm,pn;
	while(r<m && c<n){
		std::vector<int> newV;
		ct(2);
		pr=r,pc=c,pm=m,pn=n;
		print(v);
		ct(3);
		for(int i=c;i<n;i++){
			newV.push_back(v[r][i]);
		}
		r++;
		for (int i = r; i < m; ++i)
		{
			newV.push_back(v[i][n-1]);
		}
		n--;
		if(r<m){
			for (int i = n-1; i>=c; --i)
			{
				newV.push_back(v[m-1][i]);
			}
		}
		m--;
		if(c<n){
			for (int i = m-1; i >=r; --i)
			{
				newV.push_back(v[i][c]);
			}
		}
		c++;
		rotate(newV,k);
		int j=0;
		for(int i=pc;i<pn;i++){
			v[pr][i]=newV[j++];
		}
		pr++;
		for (int i = pr; i < pm; ++i)
		{
			v[i][pn-1]=newV[j++];
		}
		pn--;
		if(pr<pm){
			for (int i = pn-1; i>=pc; --i)
			{
				v[pm-1][i]=newV[j++];
			}
		}
		pm--;
		if(pc<pn){
			for (int i = pm-1; i >=pr; --i)
			{
				v[i][pc]=newV[j++];
			}
		}
		pc++;
	}
}
int main(int argc, char const *argv[])
{
	int m,n,k;
	cin>>m>>n>>k;
	std::vector<std::vector<int> > v(m,std::vector<int>(n,0));
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			cin>>v[i][j];
		}
	}
	
	fun(v,m,n,k);
	print(v);
	return 0;
}
